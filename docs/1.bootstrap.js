(window["webpackJsonp"] = window["webpackJsonp"] || []).push([[1],{

/***/ "./index.js":
/*!******************!*\
  !*** ./index.js ***!
  \******************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _bezos_wasm_game_of_life_wasm_game_of_life_bg__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @bezos/wasm-game-of-life/wasm_game_of_life_bg */ \"./node_modules/@bezos/wasm-game-of-life/wasm_game_of_life_bg.wasm\");\n/* harmony import */ var _bezos_wasm_game_of_life__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @bezos/wasm-game-of-life */ \"./node_modules/@bezos/wasm-game-of-life/wasm_game_of_life.js\");\n\n\n// import FPS from '../fps'\n\nconst CELL_SIZE = 5\nconst GRID_COLOR = '#CCCCCC'\nconst DEAD_COLOR = '#FFFFFF'\nconst ALIVE_COLOR = '#000000'\n\nlet animationId = null\n\nconst canvas = document.getElementById('game-of-life-canvas')\nconst playPauseBtn = document.getElementById('play-pause')\nconst randomInit = document.getElementById('random-init')\nconst reset = document.getElementById('reset')\n\n// let fps = new FPS('#fps')\nconst universe = _bezos_wasm_game_of_life__WEBPACK_IMPORTED_MODULE_1__[\"Universe\"].new()\nconst width = universe.width()\nconst height = universe.height()\ncanvas.width = (CELL_SIZE + 1) * width + 1\ncanvas.height = (CELL_SIZE + 1) * height + 1\n\nfunction getIndex(row, column) {\n  return row * width + column\n}\n\nconst bitInSet = (n, arr) => {\n  const byte = Math.floor(n / 8)\n  const mask = 1 << n % 8\n  return (arr[byte] & mask) === mask\n}\n\nconst ctx = canvas.getContext('2d')\n\nfunction drawGrid() {\n  ctx.beginPath()\n  ctx.strokeStyle = GRID_COLOR\n\n  // Vertical lines.\n  for (let i = 0; i <= width; i++) {\n    ctx.moveTo(i * (CELL_SIZE + 1) + 1, 0)\n    ctx.lineTo(i * (CELL_SIZE + 1) + 1, (CELL_SIZE + 1) * height + 1)\n  }\n\n  // Horizontal lines.\n  for (let j = 0; j <= height; j++) {\n    ctx.moveTo(0, j * (CELL_SIZE + 1) + 1)\n    ctx.lineTo((CELL_SIZE + 1) * width + 1, j * (CELL_SIZE + 1) + 1)\n  }\n\n  ctx.stroke()\n}\n\nfunction drawCells() {\n  const cellsPtr = universe.cells()\n  const cells = new Uint8Array(_bezos_wasm_game_of_life_wasm_game_of_life_bg__WEBPACK_IMPORTED_MODULE_0__[\"memory\"].buffer, cellsPtr, (width * height) / 8)\n  ctx.beginPath()\n\n  for (let row = 0; row < height; row++) {\n    for (let col = 0; col < width; col++) {\n      const idx = getIndex(row, col)\n      ctx.fillStyle = bitInSet(idx, cells) ? ALIVE_COLOR : DEAD_COLOR\n      ctx.fillRect(col * (CELL_SIZE + 1) + 1, row * (CELL_SIZE + 1) + 1, CELL_SIZE, CELL_SIZE)\n    }\n  }\n\n  ctx.stroke()\n}\n\nfunction renderLoop() {\n  // fps.render()\n  universe.tick()\n  drawCells()\n  animationId = requestAnimationFrame(renderLoop)\n}\n\n// 开始结束控制\nfunction isPaused() {\n  return animationId === null\n}\n\nfunction play() {\n  playPauseBtn.textContent = 'Pause'\n  renderLoop()\n}\n\nfunction pause() {\n  playPauseBtn.textContent = 'Play'\n  cancelAnimationFrame(animationId)\n  animationId = null\n}\n\nplayPauseBtn.addEventListener('click', event => {\n  if (isPaused()) {\n    play()\n  } else {\n    pause()\n  }\n})\n\nrandomInit.addEventListener('click', event => {\n  cancelAnimationFrame(animationId)\n  animationId = null\n  universe.init()\n  renderLoop()\n})\n\nreset.addEventListener('click', event => {\n  cancelAnimationFrame(animationId)\n  animationId = null\n  universe.reset()\n  drawCells()\n})\n\ncanvas.addEventListener('click', event => {\n  let boundingRect = canvas.getBoundingClientRect()\n\n  // 计算缩放\n  let scaleX = canvas.width / boundingRect.width\n  let scaleY = canvas.height / boundingRect.height\n\n  // 计算出发点在canvas中的位置\n  let canvasLeft = (event.clientX - boundingRect.left) * scaleX\n  let canvasTop = (event.clientY - boundingRect.top) * scaleY\n\n  // 计算坐标\n  const row = Math.min(Math.floor(canvasTop / (CELL_SIZE + 1)), height - 1)\n  const col = Math.min(Math.floor(canvasLeft / (CELL_SIZE + 1)), width - 1)\n\n  // 改变状态并重新绘制\n  universe.toggle_cell(row, col)\n  drawCells()\n})\n\n// 开始动画\ndrawGrid()\nplay()\n\n\n//# sourceURL=webpack:///./index.js?");

/***/ })

}]);